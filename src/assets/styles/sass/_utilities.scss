// Space
$space-values: (
  0: 0,
  1: 0.25rem,
  2: 0.5rem,
  3: 0.75rem,
  4: 1rem,
  5: 1.25rem,
  6: 1.5rem,
  7: 1.75rem,
  8: 2rem,
  9: 2.25rem,
  10: 2.5rem,
  11: 2.75rem,
  12: 3rem,
  13: 3.25rem,
  14: 3.5rem,
  15: 3.75rem,
  16: 4rem,
  17: 4.25rem,
  18: 4.5rem,
  19: 4.75rem,
  20: 5rem,
);

@mixin space($property, $value) {
  @if map-has-key($space-values, $value) {
    $space: map-get($space-values, $value);
    #{$property}: $space;
  } @else {
    #{$property}: $value * 1px;
  }
}

@for $i from 0 through 20 {
  $suffix: "-#{$i}";

  // Margin
  .m#{$suffix} {
    @include space(margin, $i);
  }
  .mx#{$suffix} {
    @include space(margin-right, $i);
    @include space(margin-left, $i);
  }
  .my#{$suffix} {
    @include space(margin-top, $i);
    @include space(margin-bottom, $i);
  }
  .mt#{$suffix} {
    @include space(margin-top, $i);
  }
  .mr#{$suffix} {
    @include space(margin-right, $i);
  }
  .mb#{$suffix} {
    @include space(margin-bottom, $i);
  }
  .ml#{$suffix} {
    @include space(margin-left, $i);
  }

  // Padding
  .p#{$suffix} {
    @include space(padding, $i);
  }
  .px#{$suffix} {
    @include space(padding-right, $i);
    @include space(padding-left, $i);
  }
  .py#{$suffix} {
    @include space(padding-top, $i);
    @include space(padding-bottom, $i);
  }
  .pt#{$suffix} {
    @include space(padding-top, $i);
  }
  .pr#{$suffix} {
    @include space(padding-right, $i);
  }
  .pb#{$suffix} {
    @include space(padding-bottom, $i);
  }
  .pl#{$suffix} {
    @include space(padding-left, $i);
  }
}

.w-full {
  width: 100%;
}

.h-full {
  height: 100%;
}

// Grid
.d-grid {
  display: grid;
}

@for $i from 1 through 20 {
  .gap-#{$i} {
    @include space(gap, $i);
  }
}

// Display
@mixin display($display) {
  display: $display;
}

$display-options: (
  block,
  inline-block,
  inline,
  table,
  table-row,
  table-cell,
  flex,
  inline-flex,
  none
);

@each $option in $display-options {
  .d-#{$option} {
    @include display($option);
  }
}

// Flexbox
$justify-content: (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly,
);

$align-items: (
  start: flex-start,
  end: flex-end,
  center: center,
  stretch: stretch,
  baseline: baseline,
);

$flex-direction: (
  row: row,
  row-reverse: row-reverse,
  column: column,
  column-reverse: column-reverse,
);

$flex-wrap: (
  nowrap: nowrap,
  wrap: wrap,
  wrap-reverse: wrap-reverse,
);

@each $key, $value in $justify-content {
  .justify-#{$key} {
    justify-content: $value;
  }
}

@each $key, $value in $align-items {
  .align-#{$key} {
    align-items: $value;
  }
}

@each $key, $value in $flex-direction {
  .flex-#{$key} {
    flex-direction: $value;
  }
}

@each $key, $value in $flex-wrap {
  .flex-wrap-#{$key} {
    flex-wrap: $value;
  }
}

// Breakpoints
$breakpoints: (
  xs: 0px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
);

@mixin media($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @error "Breakpoint #{$breakpoint} not found in $breakpoints.";
  }
}

// Cursor
.cursor {
  &-pointer {
    cursor: pointer;
  }
}

// Overflow
.overflow {
  &-y-scroll {
    overflow-y: scroll;
  }

  &-x-scroll {
    overflow-x: scroll;
  }
}
